name: Release and Publish

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release-and-publish:
    name: Create Release and Publish Packages
    # Only run if ALL conditions are met:
    # 1. PR was actually merged (not just closed)
    # 2. Source branch starts with "release/"
    # 3. PR title starts with "Release v"
    # 4. PR has the "release" label
    if: |
      github.event.pull_request.merged == true &&
      startsWith(github.head_ref, 'release/') &&
      startsWith(github.event.pull_request.title, 'Release v') &&
      contains(github.event.pull_request.labels.*.name, 'release')

    runs-on: ubuntu-latest
    permissions:
      contents: write        # Required to create releases
      packages: write        # Required to publish to GitHub Packages
      pull-requests: write   # Required to comment on PR

    steps:
      # ============================================
      # Phase 1: Prepare and Validate
      # ============================================
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"

      - name: Verify tag exists
        run: |
          git fetch --tags
          if ! git tag -l "v${{ steps.version.outputs.version }}" | grep -q .; then
            echo "Error: Tag v${{ steps.version.outputs.version }} does not exist"
            echo "This should have been created by the prepare-release script."
            exit 1
          fi
          echo "‚úì Tag v${{ steps.version.outputs.version }} exists"

      - name: Validate version match
        run: |
          TAG_VERSION=${{ steps.version.outputs.version }}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Git tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

          echo "‚úì Version validation passed: $PACKAGE_VERSION"

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view v${{ steps.version.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Release already exists, will skip creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úì Release does not exist, will create"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # Phase 2: Create GitHub Release
      # ============================================
      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          gh release create v${{ steps.version.outputs.version }} \
            --title "Release v${{ steps.version.outputs.version }}" \
            --generate-notes
          echo "‚úÖ Created release v${{ steps.version.outputs.version }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # Phase 3: Build and Test
      # ============================================
      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      # ============================================
      # Phase 4: Publish to npm Registries
      # ============================================
      - name: Setup Node.js for public npm
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://registry.npmjs.org

      - name: Publish to public npm registry
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://npm.pkg.github.com

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # Phase 5: Notify
      # ============================================
      - name: Add comment to PR
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body \
              "üöÄ Release [v${{ steps.version.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}) has been created and published!

              **Published packages:**
              - üì¶ [npm registry](https://www.npmjs.com/package/@with-logic/fast-forward/v/${{ steps.version.outputs.version }})
              - üì¶ [GitHub Packages](https://github.com/${{ github.repository }}/pkgs/npm/fast-forward)

              **Installation:**
              \`\`\`bash
              npm install @with-logic/fast-forward@${{ steps.version.outputs.version }}
              \`\`\`"
          else
            gh pr comment ${{ github.event.pull_request.number }} --body \
              "‚ùå Release workflow failed for v${{ steps.version.outputs.version }}

              **View logs:** [Workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

              Please check the logs and retry if needed."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
